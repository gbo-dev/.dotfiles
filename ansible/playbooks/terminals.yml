---
# Terminals playbook for dotfiles installation
# This installs terminal applications like Ghostty and fonts

- name: "Display terminal installation plan"
  debug:
    msg:
      - "Installing terminal applications for {{ ansible_distribution }}"
      - "Ghostty: {{ terminals.ghostty.enabled }}"
      - "Alacritty: {{ terminals.alacritty.enabled }}"
      - "Kitty: {{ terminals.kitty.enabled }}"
      - "Nerd Fonts: {{ fonts.install_nerd_fonts }}"

- name: "Install terminal dependencies"
  package:
    name:
      - curl
      - wget
      - tar
      - xz-utils
      - desktop-file-utils
      - fontconfig
    state: present
  register: terminal_deps_result

# Ghostty Terminal Installation
- name: "Check if Ghostty is already installed"
  command: ghostty --version
  register: ghostty_check
  failed_when: false
  changed_when: false

- name: "Detect system architecture"
  set_fact:
    system_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'x86_64' }}"

- name: "Get latest Ghostty release info"
  uri:
    url: "https://api.github.com/repos/ghostty-org/ghostty/releases/latest"
    method: GET
  register: ghostty_latest_release
  when: terminals.ghostty.enabled and ghostty_check.rc != 0

- name: "Find Ghostty download URL for current architecture"
  set_fact:
    ghostty_download_url: "{{ item.browser_download_url }}"
  when:
    - terminals.ghostty.enabled
    - ghostty_check.rc != 0
    - "'linux' in item.name"
    - system_arch in item.name
    - "'.tar.xz' in item.name"
  loop: "{{ ghostty_latest_release.json.assets | default([]) }}"

- name: "Create temporary directory for Ghostty"
  tempfile:
    state: directory
    suffix: ghostty
  register: ghostty_temp_dir
  when: terminals.ghostty.enabled and ghostty_download_url is defined

- name: "Download Ghostty release"
  get_url:
    url: "{{ ghostty_download_url }}"
    dest: "{{ ghostty_temp_dir.path }}/ghostty.tar.xz"
    mode: '0644'
  when: terminals.ghostty.enabled and ghostty_download_url is defined

- name: "Extract Ghostty"
  unarchive:
    src: "{{ ghostty_temp_dir.path }}/ghostty.tar.xz"
    dest: "{{ ghostty_temp_dir.path }}"
    remote_src: true
  when: terminals.ghostty.enabled and ghostty_download_url is defined

- name: "Find extracted Ghostty directory"
  find:
    paths: "{{ ghostty_temp_dir.path }}"
    file_type: directory
    patterns: "ghostty-*"
  register: ghostty_extracted_dir
  when: terminals.ghostty.enabled and ghostty_download_url is defined

- name: "Remove existing Ghostty installation"
  file:
    path: /opt/ghostty
    state: absent
  when: terminals.ghostty.enabled and ghostty_download_url is defined

- name: "Install Ghostty to system directory"
  command: "mv {{ ghostty_extracted_dir.files[0].path }} /opt/ghostty"
  when:
    - terminals.ghostty.enabled
    - ghostty_download_url is defined
    - ghostty_extracted_dir.files | length > 0

- name: "Create Ghostty symlink"
  file:
    src: /opt/ghostty/bin/ghostty
    dest: /usr/local/bin/ghostty
    state: link
    force: true
  when: terminals.ghostty.enabled and ghostty_download_url is defined

- name: "Install Ghostty desktop file"
  copy:
    src: /opt/ghostty/share/applications/ghostty.desktop
    dest: /usr/share/applications/ghostty.desktop
    remote_src: true
    mode: '0644'
  when:
    - terminals.ghostty.enabled
    - ghostty_download_url is defined
  register: ghostty_desktop_file

- name: "Install Ghostty icon"
  copy:
    src: /opt/ghostty/share/icons/hicolor/256x256/apps/ghostty.png
    dest: /usr/share/icons/hicolor/256x256/apps/ghostty.png
    remote_src: true
    mode: '0644'
  when:
    - terminals.ghostty.enabled
    - ghostty_download_url is defined
  register: ghostty_icon_file

- name: "Update desktop database"
  command: update-desktop-database
  when: ghostty_desktop_file.changed | default(false)

- name: "Update icon cache"
  command: gtk-update-icon-cache -f -t /usr/share/icons/hicolor/
  when: ghostty_icon_file.changed | default(false)
  failed_when: false

- name: "Clean up Ghostty temporary files"
  file:
    path: "{{ ghostty_temp_dir.path }}"
    state: absent
  when: ghostty_temp_dir.path is defined

# Alacritty Installation (from package manager)
- name: "Install Alacritty from package manager"
  package:
    name: alacritty
    state: present
  when: terminals.alacritty.enabled
  register: alacritty_install_result

# Kitty Installation (from package manager)
- name: "Install Kitty from package manager"
  package:
    name: kitty
    state: present
  when: terminals.kitty.enabled
  register: kitty_install_result

# Font Installation
- name: "Create fonts directory"
  file:
    path: "{{ ansible_env.HOME }}/.local/share/fonts"
    state: directory
    owner: "{{ dotfiles.user }}"
    group: "{{ dotfiles.user }}"
    mode: '0755'
  become_user: "{{ dotfiles.user }}"

- name: "Create font subdirectories"
  file:
    path: "{{ ansible_env.HOME }}/.local/share/fonts/{{ item }}"
    state: directory
    owner: "{{ dotfiles.user }}"
    group: "{{ dotfiles.user }}"
    mode: '0755'
  loop:
    - JetBrainsMono
    - AdwaitaMono
  become_user: "{{ dotfiles.user }}"

- name: "Create temporary directory for fonts"
  tempfile:
    state: directory
    suffix: fonts
  register: fonts_temp_dir
  when: fonts.install_nerd_fonts

# Install JetBrainsMono Nerd Font
- name: "Download JetBrainsMono Nerd Font"
  get_url:
    url: "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip"
    dest: "{{ fonts_temp_dir.path }}/JetBrainsMono.zip"
    mode: '0644'
  when: fonts.install_nerd_fonts

- name: "Extract JetBrainsMono Nerd Font"
  unarchive:
    src: "{{ fonts_temp_dir.path }}/JetBrainsMono.zip"
    dest: "{{ ansible_env.HOME }}/.local/share/fonts/JetBrainsMono"
    remote_src: true
    owner: "{{ dotfiles.user }}"
    group: "{{ dotfiles.user }}"
  become_user: "{{ dotfiles.user }}"
  when: fonts.install_nerd_fonts

# Get latest Adwaita Fonts
- name: "Get Adwaita Fonts download page"
  uri:
    url: "https://download.gnome.org/sources/adwaita-fonts/"
    method: GET
  register: adwaita_versions_page
  when: fonts.install_nerd_fonts

- name: "Extract latest Adwaita version"
  set_fact:
    adwaita_version: "49"  # Fallback version
  when: fonts.install_nerd_fonts

- name: "Download Adwaita Fonts"
  get_url:
    url: "https://download.gnome.org/sources/adwaita-fonts/{{ adwaita_version }}/adwaita-fonts-{{ adwaita_version }}.0.tar.xz"
    dest: "{{ fonts_temp_dir.path }}/adwaita-fonts.tar.xz"
    mode: '0644'
  when: fonts.install_nerd_fonts
  failed_when: false

- name: "Extract Adwaita Fonts"
  unarchive:
    src: "{{ fonts_temp_dir.path }}/adwaita-fonts.tar.xz"
    dest: "{{ fonts_temp_dir.path }}"
    remote_src: true
  when: fonts.install_nerd_fonts
  failed_when: false

- name: "Find Adwaita font files"
  find:
    paths: "{{ fonts_temp_dir.path }}"
    patterns: "AdwaitaMono-*.ttf,AdwaitaMono-*.otf"
    recurse: true
  register: adwaita_font_files
  when: fonts.install_nerd_fonts

- name: "Copy Adwaita Mono fonts"
  copy:
    src: "{{ item.path }}"
    dest: "{{ ansible_env.HOME }}/.local/share/fonts/AdwaitaMono/"
    remote_src: true
    owner: "{{ dotfiles.user }}"
    group: "{{ dotfiles.user }}"
    mode: '0644'
  loop: "{{ adwaita_font_files.files | default([]) }}"
  become_user: "{{ dotfiles.user }}"
  when: fonts.install_nerd_fonts

- name: "Install system font packages"
  package:
    name: "{{ fonts.packages }}"
    state: present
  when: fonts.packages is defined

- name: "Update font cache"
  command: fc-cache -fv
  become_user: "{{ dotfiles.user }}"
  when: fonts.install_nerd_fonts

- name: "Clean up fonts temporary files"
  file:
    path: "{{ fonts_temp_dir.path }}"
    state: absent
  when: fonts_temp_dir.path is defined

# Verification
- name: "Verify terminal installations"
  command: "{{ item }} --version"
  register: terminal_verification
  failed_when: false
  changed_when: false
  loop:
    - ghostty
    - alacritty
    - kitty
  when:
    - (item == 'ghostty' and terminals.ghostty.enabled) or
      (item == 'alacritty' and terminals.alacritty.enabled) or
      (item == 'kitty' and terminals.kitty.enabled)

- name: "Create list of installed terminals"
  set_fact:
    installed_terminals: "{{ installed_terminals | default([]) + [item.item] }}"
  when: item.rc == 0
  loop: "{{ terminal_verification.results | default([]) }}"
  loop_control:
    label: "{{ item.item }}"

- name: "Create list of failed terminals"
  set_fact:
    failed_terminals: "{{ failed_terminals | default([]) + [item.item] }}"
  when: item.rc != 0
  loop: "{{ terminal_verification.results | default([]) }}"
  loop_control:
    label: "{{ item.item }}"

- name: "Check installed fonts"
  command: fc-list | grep -i "jetbrains\|adwaita"
  register: font_check
  failed_when: false
  changed_when: false
  become_user: "{{ dotfiles.user }}"

- name: "Display terminal installation results"
  debug:
    msg:
      - "=== Terminal Installation Results ==="
      - "Successfully installed: {{ installed_terminals | default([]) | join(', ') }}"
      - "Failed installations: {{ failed_terminals | default([]) | join(', ') }}"
      - "Fonts installed: {{ 'Yes' if font_check.rc == 0 and font_check.stdout_lines | length > 0 else 'No' }}"
      - "Font count: {{ font_check.stdout_lines | default([]) | length }}"

- name: "Set terminals completion fact"
  set_fact:
    terminals_completed: true
    terminals_installation_summary:
      installed: "{{ installed_terminals | default([]) }}"
      failed: "{{ failed_terminals | default([]) }}"
      fonts_installed: "{{ font_check.rc == 0 and font_check.stdout_lines | length > 0 }}"
