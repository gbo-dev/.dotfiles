---
# Main playbook for dotfiles installation and configuration
# This orchestrates the entire setup process for Linux systems

- name: "Dotfiles Installation and Configuration"
  hosts: all
  become: true
  gather_facts: true
  vars_files:
    - ../vars/packages.yml
    - ../vars/editors.yml
    - ../vars/development.yml

  pre_tasks:
    - name: "Display installation summary"
      debug:
        msg:
          - "=== Dotfiles Installation Starting ==="
          - "Target: {{ inventory_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "User: {{ ansible_user }}"
          - "Home: {{ ansible_env.HOME }}"
          - "Install mode: {{ install_mode | default('full') }}"
          - "======================================"

    - name: "Validate system requirements"
      assert:
        that:
          - ansible_os_family in ['Debian', 'RedHat', 'Archlinux']
          - ansible_version.full is version('2.9', '>=')
        fail_msg: "System requirements not met"
        success_msg: "System requirements validated"

    - name: "Create backup directory"
      file:
        path: "{{ dotfiles.backup_dir }}-{{ ansible_date_time.epoch }}"
        state: directory
        owner: "{{ dotfiles.user }}"
        group: "{{ dotfiles.user }}"
        mode: '0755'
      when: dotfiles.create_backup | default(true)
      become_user: "{{ dotfiles.user }}"

  tasks:
    # Phase 1: Prerequisites and system preparation
    - name: "Phase 1: System Prerequisites"
      include_tasks: prerequisites.yml
      tags:
        - prerequisites
        - always

    # Phase 2: System package installation
    - name: "Phase 2: System Packages"
      include_tasks: system-packages.yml
      when: install_flags.full | default(true)
      tags:
        - packages
        - system

    # Phase 3: Editor installation
    - name: "Phase 3: Editors"
      include_tasks: editors.yml
      when:
        - install_flags.full | default(true)
        - not install_flags.minimal | default(false)
      tags:
        - editors

    # Phase 4: Terminal applications
    - name: "Phase 4: Terminal Applications"
      include_tasks: terminals.yml
      when:
        - install_flags.gui_applications | default(true)
        - not install_flags.minimal | default(false)
      tags:
        - terminals

    # Phase 5: Development tools
    - name: "Phase 5: Development Tools"
      include_tasks: development.yml
      when:
        - install_flags.development | default(true)
        - not install_flags.minimal | default(false)
      tags:
        - development
        - dev

    # Phase 6: Dotfiles configuration
    - name: "Phase 6: Dotfiles Configuration"
      include_tasks: dotfiles.yml
      tags:
        - dotfiles
        - stow
        - config

  post_tasks:
    - name: "Installation Summary"
      debug:
        msg:
          - "=== Installation Complete ==="
          - "Installed packages: {{ installed_packages | default([]) | length }}"
          - "Installed editors: {{ installed_editors | default([]) | length }}"
          - "Configured dotfiles: {{ configured_dotfiles | default([]) | length }}"
          - "Failed tasks: {{ failed_tasks | default([]) | length }}"
          - "============================"

    - name: "Post-installation instructions"
      debug:
        msg:
          - ""
          - "Post-installation steps:"
          - "1. Restart your terminal or run: source ~/.zshrc"
          - "2. Open tmux and press prefix + I to install tmux plugins"
          - "3. Open neovim to trigger plugin installation"
          - "4. Configure any editor-specific settings as needed"
          - ""
          - "Useful commands:"
          - "- make stow: Re-apply dotfile configurations"
          - "- make update: Update all tools to latest versions"
          - ""

    - name: "Shell change notification"
      debug:
        msg:
          - "IMPORTANT: Your default shell has been changed to zsh."
          - "Please log out and log back in for the change to take effect."
          - "Or run: exec zsh"
      when: shell_changed | default(false)

# Separate playbooks for different installation modes
---
- name: "Minimal Installation"
  import_playbook: main.yml
  when: install_mode == "minimal"
  vars:
    install_flags:
      minimal: true
      full: false
      development: false
      gui_applications: false

---
- name: "Development Installation"
  import_playbook: main.yml
  when: install_mode == "development"
  vars:
    install_flags:
      minimal: false
      full: true
      development: true
      gui_applications: false

---
- name: "Full Installation"
  import_playbook: main.yml
  when: install_mode == "full" or install_mode is not defined
  vars:
    install_flags:
      minimal: false
      full: true
      development: true
      gui_applications: true
