---
# Editor configuration variables for dotfiles installation
# Based on the existing install/editors.sh script

# Neovim configuration
neovim:
  enabled: true
  install_method: "github_release"  # Options: github_release, package, appimage
  version: "latest"  # Can specify version like "v0.9.5"

  # GitHub release configuration
  github:
    repo: "neovim/neovim"
    asset_pattern: "nvim-linux64.tar.gz"
    extract_dir: "nvim-linux64"
    install_dir: "/opt/nvim"
    binary_path: "/opt/nvim/bin/nvim"
    symlink_path: "/usr/local/bin/nvim"

  # Package manager fallback
  package:
    name: "neovim"

  # Dependencies
  dependencies:
    - git
    - curl
    - build-essential
    - ripgrep
    - fd-find
    - nodejs
    - npm

  # Configuration
  config:
    backup_existing: true
    auto_install_plugins: false  # Let lazy.nvim handle this

# Zed editor configuration
zed:
  enabled: true
  install_method: "script"  # Official installation script

  # Installation script
  script:
    url: "https://zed.dev/install.sh"
    verify_signature: false

  # Dependencies
  dependencies:
    - curl

  # Configuration
  config:
    backup_existing: true

# Visual Studio Code configuration
vscode:
  enabled: true
  install_method: "repository"  # Options: repository, snap, flatpak

  # Repository configuration
  repository:
    key_url: "https://packages.microsoft.com/keys/microsoft.asc"
    key_path: "/etc/apt/trusted.gpg.d/packages.microsoft.gpg"
    repo: "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"
    package: "code"

  # Extensions to install (optional)
  extensions:
    - ms-vscode.vscode-typescript-next
    - bradlc.vscode-tailwindcss
    - rust-lang.rust-analyzer
    - golang.go
    - ms-python.python
    - esbenp.prettier-vscode
    - ms-vscode.vscode-json

  # Configuration
  config:
    backup_existing: true
    install_extensions: false  # Set to true to auto-install extensions

# Language servers for better editor experience
language_servers:
  # Node.js based language servers
  nodejs:
    enabled: true
    packages:
      - typescript-language-server
      - bash-language-server
      - vscode-langservers-extracted
      - "@tailwindcss/language-server"
      - yaml-language-server
      - "@astrojs/language-server"
      - svelte-language-server

  # Rust analyzer
  rust:
    enabled: true
    install_with_rustup: true
    component: "rust-analyzer"

  # Go language server
  go:
    enabled: true
    package: "golang.org/x/tools/gopls@latest"
    install_with_go: true

  # Python language servers
  python:
    enabled: true
    packages:
      - python-lsp-server
      - pylsp-mypy
      - python-lsp-black

  # Lua language server
  lua:
    enabled: false
    install_method: "manual"  # Requires manual compilation

# Editor verification commands
verification_commands:
  neovim: "nvim --version"
  zed: "zed --version 2>/dev/null || command -v zed"
  vscode: "code --version"

# Common editor dependencies
common_dependencies:
  - git
  - curl
  - wget
  - build-essential
  - ripgrep
  - fd-find
  - nodejs
  - npm

# Editor-specific directories and files to backup
backup_paths:
  neovim:
    - "{{ ansible_env.HOME }}/.config/nvim"
    - "{{ ansible_env.HOME }}/.local/share/nvim"
    - "{{ ansible_env.HOME }}/.cache/nvim"
  zed:
    - "{{ ansible_env.HOME }}/.config/zed"
  vscode:
    - "{{ ansible_env.HOME }}/.config/Code"
    - "{{ ansible_env.HOME }}/.vscode"

# Installation order (some editors depend on others being installed first)
installation_order:
  1: "dependencies"
  2: "language_servers.nodejs"
  3: "neovim"
  4: "zed"
  5: "vscode"
  6: "language_servers.rust"
  7: "language_servers.go"
  8: "language_servers.python"

# Platform-specific overrides
platform_overrides:
  # WSL specific settings
  wsl:
    vscode:
      install_method: "skip"  # Usually installed on Windows host
    zed:
      enabled: false  # GUI app, not suitable for WSL

  # Server specific settings
  server:
    vscode:
      enabled: false  # GUI app, not suitable for servers
    zed:
      enabled: false  # GUI app, not suitable for servers

# Post-installation tasks
post_install:
  neovim:
    - "Create desktop entry"
    - "Update alternatives"
  zed:
    - "Verify installation"
  vscode:
    - "Add to applications menu"
    - "Install extensions (if enabled)"

# Error handling
error_handling:
  continue_on_error: true
  retry_attempts: 3
  fallback_methods:
    neovim:
      - "package"  # Fall back to package manager if GitHub release fails
    zed:
      - "manual"   # Provide manual installation instructions
    vscode:
      - "snap"     # Fall back to snap if repository fails
      - "flatpak"  # Fall back to flatpak
