---
# Global variables for all hosts in the inventory
# These variables apply to all hosts unless overridden

# System Information
ansible_user: "{{ ansible_env.USER | default('user') }}"
ansible_become: true
ansible_become_method: sudo

# Dotfiles Configuration
dotfiles:
  repo_url: "https://github.com/yourusername/dotfiles.git"  # Update this
  local_path: "{{ ansible_env.HOME }}/.dotfiles"
  user: "{{ ansible_env.USER }}"
  home: "{{ ansible_env.HOME }}"
  backup_dir: "{{ ansible_env.HOME }}/.dotfiles-backup"
  create_backup: true

# Shell Configuration
shell:
  default: "/bin/zsh"
  install_oh_my_zsh: true
  oh_my_zsh_plugins:
    - git
    - zsh-autosuggestions
    - zsh-syntax-highlighting
    - fzf

# Git Configuration (update with your details)
git:
  user_name: "Your Name"
  user_email: "your.email@example.com"
  default_branch: "main"
  signing_key: ""  # Optional GPG key for commit signing

# SSH Configuration
ssh:
  key_type: "ed25519"
  key_comment: "{{ ansible_env.USER }}@{{ ansible_hostname }}"
  generate_key: false  # Set to true if you want to generate a new SSH key

# Package Lists - Core system packages
packages:
  essential:
    - curl
    - wget
    - git
    - build-essential
    - make
    - gcc
    - unzip
    - ca-certificates
    - gnupg
    - lsb-release

  cli_tools:
    - zsh
    - stow
    - tmux
    - fzf
    - ripgrep
    - fd-find
    - bat
    - htop
    - tree
    - xclip
    - shellcheck
    - jq

  optional:
    - httpie
    - tldr
    - imagemagick
    - ffmpeg
    - sqlite3
    - postgresql-client

# Editor Configuration
editors:
  neovim:
    enabled: true
    install_method: "github_release"  # Options: package, github_release, build
    version: "latest"

  zed:
    enabled: true
    install_method: "script"

  vscode:
    enabled: true
    install_method: "repository"
    extensions: []  # Add VS Code extensions here

# Terminal Applications
terminals:
  ghostty:
    enabled: true
    install_method: "github_release"
    version: "latest"

  alacritty:
    enabled: false  # Can be installed from package manager
    install_method: "package"

  kitty:
    enabled: false  # Can be installed from package manager
    install_method: "package"

# Fonts Configuration
fonts:
  install_nerd_fonts: true
  nerd_fonts:
    - "JetBrainsMono"
    - "FiraCode"
    - "Hack"
  system_fonts:
    - "fonts-firacode"
    - "fonts-jetbrains-mono"

# Development Tools
development:
  # Language runtimes
  nodejs:
    enabled: true
    install_method: "nvm"
    version: "lts"
    global_packages:
      - yarn
      - typescript
      - ts-node
      - eslint
      - prettier
      - create-react-app
      - http-server
      - typescript-language-server
      - bash-language-server
      - vscode-langservers-extracted
      - "@tailwindcss/language-server"
      - yaml-language-server

  rust:
    enabled: true
    install_method: "rustup"
    components:
      - rust-analyzer
      - clippy
      - rustfmt

  go:
    enabled: true
    install_method: "official"
    version: "latest"
    packages:
      - golang.org/x/tools/gopls@latest

  python:
    enabled: true
    install_method: "system"
    packages:
      - pip
      - pipenv
      - virtualenv
      - python3-dev

  # Containerization
  docker:
    enabled: true
    install_method: "repository"
    add_user_to_group: true
    compose: true

  # Database clients
  databases:
    enabled: true
    clients:
      - sqlite3
      - postgresql-client
      - redis-tools

# Stow Configuration
stow:
  packages:
    - nvim
    - tmux
    - zsh
    - ghostty
    - zed
    - alacritty
    - kitty
  target_dir: "{{ ansible_env.HOME }}"
  stow_dir: "{{ dotfiles.local_path }}"
  verbose: true
  simulate: false  # Set to true for dry run

# Tmux Configuration
tmux:
  install_tpm: true
  tpm_path: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
  plugins_auto_install: false  # Manual installation preferred

# Installation Mode Flags
install_flags:
  minimal: false
  full: true
  development: true
  gui_applications: true
  optional_tools: true
  skip_interactive: false

# Logging and Debug
ansible_config:
  log_level: "INFO"
  gather_facts: true
  fact_caching: true
  retry_files_enabled: false

# Security Settings
security:
  check_signatures: true
  verify_downloads: true
  use_https: true

# Performance Settings
performance:
  parallel_downloads: true
  max_parallel_jobs: 4
  timeout_seconds: 300

# Platform Detection
platform:
  is_wsl: "{{ 'microsoft' in ansible_kernel | lower }}"
  is_server: "{{ ansible_env.DISPLAY is not defined }}"
  has_gui: "{{ ansible_env.DISPLAY is defined }}"

# Color Scheme and UI
ui:
  enable_colors: true
  progress_bar: true
  verbose_output: false
